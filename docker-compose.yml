services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres-corenet
    env_file:
      - ./backend/.env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: on-failure
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: on-failure
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
      - ./backend/media:/app/media
      - ./backend/static:/app/static
    command: [ "sh", "-c", "/app/local_runner.sh" ]
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8000/api/v1/health/ || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:8080/ || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

volumes:
  postgres-data:

networks:
  app-network:
    driver: bridge